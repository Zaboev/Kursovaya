#include <iostream>
#include <set>
#include <string>
#include <fstream>
#include <stdexcept>
#include <sstream>

class Message
{
public:
	std::string who;
	std::string when;
	std::string what;

	Message(const std::string& name, const std::string& time, const std::string& text) : who(name), when(time), what(text) {}

	bool operator<(const Message& other) const
	{
		if (who != other.who)
			return who < other.who;
		if (when != other.when)
			return when < other.when;
		return what < other.what;
	}
};


struct MessagePtrLess
{
	bool operator()(const Message* lhs, const Message* rhs) const
	{
		return *lhs < *rhs;
	}
};


int main()
{
	try
	{
		std::ifstream file("data.txt");
		if (!file.is_open())
			throw std::ios_base::failure("Open file exception");

		std::ifstream file_instruction("instruction.txt");
		if (!file.is_open())
			throw std::ios_base::failure("Open file exception");

		std::set<Message*, MessagePtrLess> messages;
		std::string line, line_source;

		while (std::getline(file, line))
		{
			std::istringstream str(line);
			std::string name, time, text;

			if (std::getline(str, name, ' ') && std::getline(str, time, ':') && std::getline(str, text))
			{
				if (!text.empty() && text[0] == ' ')
					text.erase(0, 1);
				Message* message = new Message(name, time, text);
				messages.insert(message);
			}
		}

		while (std::getline(file_instruction, line))
		{
			std::istringstream str(line);
			std::string instruction, name, time1, time2;

			std::getline(str, instruction, ' ');
			if (instruction == "NAME")
			{
				std::getline(str, name);
				for (const auto& Ptr : messages)
				{
					if (Ptr->who == name)
					{
						std::cout << Ptr->who << " " << Ptr->when << ": " << Ptr->what << std::endl;
					}
				}
				std::cout << std::endl;
			}
			else if (instruction == "NAMEDATA")
			{
				std::getline(str, name, ' ');
				std::getline(str, time1, ' ');
				std::getline(str, time2);

				for (const auto& Ptr : messages)
				{
					if (Ptr->who == name && Ptr->when > time1 && Ptr->when < time2)
						std::cout << Ptr->who << " " << Ptr->when << ": " << Ptr->what << std::endl;
				}
				std::cout << std::endl;
			}
			else if (instruction == "DATA")
			{
				std::getline(str, time1, ' ');
				std::getline(str, time2);

				for (const auto& Ptr : messages)
				{
					if (Ptr->when > time1 && Ptr->when < time2)
						std::cout << Ptr->who << " " << Ptr->when << ": " << Ptr->what << std::endl;
				}
				std::cout << std::endl;
			}
			else if (instruction == "DELETEALL")
			{
				std::getline(str, name);
				for (auto it = messages.begin(); it != messages.end(); )
				{
					if ((*it)->who == name)
					{
						delete* it;
						it = messages.erase(it);
					}
					else
					{
						++it;
					}
				}
			}
			else if (instruction == "DELETEONE")
			{
				std::getline(str, name, ' ');
				std::getline(str, time1);

				for (auto it = messages.begin(); it != messages.end(); )
				{
					if ((*it)->who == name && (*it)->when == time1)
					{
						delete* it;
						it = messages.erase(it);
						break;
					}
					else
					{
						++it;
					}
				}
			}
		}

		for (const auto& Ptr : messages)
		{
			std::cout << Ptr->who << ' ' << Ptr->when << ' ' << Ptr->what << std::endl;
		}
	}
	catch (std::exception)
	{
		std::cout << "Программа рухнула";
		return 1;
	}

	return 0;
}
