#include <fstream>
#include <iostream>
#include <algorithm>
#include <string>
#include <vector>
#include <sstream>
#include <map>
#include <cstdlib>
#include <random>
#include <set>


void Create(std::map<std::string, std::vector<long>>& cont, std::string& name)
{
	cont[name] = std::vector<long>();
}

void Load(std::map<std::string, std::vector<long>>& cont, std::string& name, std::string& file_name)
{
	std::ifstream file(file_name);
	long num;

	while (file >> num)
		cont[name].push_back(num);

	file.close();

	std::cout << "Container " << name << " after the Load operation" << std::endl;
	for (auto i : cont[name])
		std::cout << i << ' ';
	std::cout << '\n' << '\n';
}

void Save(std::map<std::string, std::vector<long>>& cont, std::string& name, std::string& file_name)
{
	std::ofstream file(file_name);

	for (auto it = cont[name].begin(); it != cont[name].end(); it++)
		file << *it << ' ';

	file.close();

	std::cout << "Save operation completed successfully" << std::endl;
	std::cout << std::endl;
}

void Rand(std::map < std::string, std::vector<long>>& cont, std::string& name, const int& count, const int& rb, const int& lb)
{
	srand(time(NULL));
	long len = lb - rb;

	for (int i = 0; i < count; i++)
		cont[name].push_back((rand() % len + 1) + rb);

	std::cout << "Container " << name << " after the Rand operation" << std::endl;
	for (auto i : cont[name])
		std::cout << i << ' ';
	std::cout << '\n' << '\n';
}

void Concat(std::map < std::string, std::vector<long>>& cont, std::string& name1, std::string& name2)
{
	for (auto it = cont[name2].begin(); it != cont[name2].end(); it++)
		cont[name1].push_back(*it);

	std::cout << "Container " << name1 << " after the Concat operation" << std::endl;
	for (auto i : cont[name1])
		std::cout << i << ' ';
	std::cout << '\n' << '\n';
}

void Free(std::map < std::string, std::vector<long>>& cont, std::string& name)
{
	cont[name].clear();
	cont.erase(name);

	std::cout << "Container " << name << " after the Free operation" << std::endl;
	for (auto i : cont[name])
		std::cout << i << ' ';
	std::cout << '\n';
}

void Remove(std::map <std::string, std::vector<long>>& cont, std::string& name, const int& index, const int& pops)
{
	cont[name].erase(cont[name].begin() + index, cont[name].begin() + index + pops);
	cont[name].resize(cont[name].size() - pops + index + 1);

	std::cout << "Container " << name << " after the Remove operation" << std::endl;
	for (auto i : cont[name])
		std::cout << i << ' ';
	std::cout << '\n' << '\n';
}

void Copy(std::map<std::string, std::vector<long>>& cont, std::string& name1, int index_begin, int index_end, std::string& name2)
{
	for (auto it = cont[name1].begin() + index_begin; it != cont[name1].begin() + index_end + 1; it++)
		cont[name2].push_back(*it);

	std::cout << "Container " << name2 << " after the Copy operation" << std::endl;
	for (auto i : cont[name2])
		std::cout << i << ' ';
	std::cout << '\n' << '\n';
}

void Sort(std::map<std::string, std::vector<long>>& cont, std::string& name, std::string& symbol)
{
	if (symbol == "+")
		std::sort(cont[name].begin(), cont[name].end());
	else if (symbol == "-")
		std::sort(cont[name].begin(), cont[name].end(), std::greater<long>());

	std::cout << "Container " << name << " after the Sort" << symbol << " operation" << std::endl;
	for (auto i : cont[name])
		std::cout << i << ' ';
	std::cout << '\n' << '\n';
}

void Permute(std::map<std::string, std::vector<long>>& cont, std::string& name)
{
	std::random_device rd;
	std::mt19937 seed(rd());

	std::shuffle(cont[name].begin(), cont[name].end(), seed);

	std::cout << "Container " << name << " after the Permute operation" << std::endl;
	for (auto i : cont[name])
		std::cout << i << ' ';
	std::cout << '\n' << '\n';
}

void Intersect(std::map<std::string, std::vector<long>>& cont, std::string& name1, std::string& name2)
{
	for (auto i : cont[name1])
		for (auto j : cont[name2])
			if (i == j)
				cont[name1].push_back(i);

	std::cout << "Container " << name1 << " after the Intersect operation" << std::endl;
	for (auto i : cont[name1])
		std::cout << i << ' ';
	std::cout << '\n' << '\n';
}

void Xor(std::map<std::string, std::vector<long>>& cont, std::string& name1, std::string& name2)
{
	std::vector<long> result;

	std::set<long> A;
	std::set<long> B;

	for (auto i : cont[name1])
		A.insert(i);
	for (auto i : cont[name2])
		B.insert(i);

	std::set_symmetric_difference(A.begin(), A.end(), B.begin(), B.end(), std::back_inserter(result));

	cont[name1] = result;

	std::cout << "Container " << name1 << " after the Xor operation" << std::endl;
	for (auto i : cont[name1])
		std::cout << i << ' ';
	std::cout << '\n' << '\n';
}

void Stat(std::map<std::string, std::vector<long>>& cont, std::string& name)
{
	std::cout << "Array " << name << " stats:" << std::endl;
	size_t size = cont[name].size();
	std::cout << "Size " << size << std::endl;

	long max = cont[name][0], min = cont[name][0];
	int index_max = 0, index_min = 0;
	for (size_t i = 0; i < size; i++)
	{
		if (cont[name][i] > max)
		{
			index_max = i;
			max = cont[name][i];
		}
		if (cont[name][i] < min)
		{
			index_min = i;
			min = cont[name][i];
		}
	}

	std::cout << "Max number " << max << " in the Array[" << index_max << "]" << std::endl;
	std::cout << "Min number " << min << " in the Array[" << index_min << "]" << std::endl;

	std::map<long, int> counter;

	for (auto i : cont[name])
		counter[i]++;

	max = 0;
	long num = 0;
	for (auto a : counter)
		if (a.second > max)
		{
			max = a.second;
			num = a.first;
		}

	std::cout << "Most common number " << num << std::endl;

	long sum = 0;
	for (auto i : cont[name])
		sum += i;
	long ave = sum / size;
	long result;
	if (ave - min > max - ave)
		result = ave - min;
	else
		result = max - ave;

	std::cout << "Average of numbers " << ave << std::endl;
	std::cout << "Maximum deviation " << result << std::endl;
	std::cout << std::endl;
}

void Print(std::map<std::string, std::vector<long>>& cont, std::string& name, int first, int last)
{
	if (last > cont[name].size())
		return;

	std::cout << "Result after short Print operation" << std::endl;
	for (int i = first - 1; i < last; ++i)
		std::cout << cont[name][i] << ' ';
	std::cout << '\n' << '\n';
}

void Print(std::map<std::string, std::vector<long>>& cont, std::string& name, std::string& all)
{
	std::cout << "Result after normal Print operation" << std::endl;
	for (auto it = cont[name].begin(); it != cont[name].end(); ++it)
		std::cout << *it << ' ';
	std::cout << std::endl;
}

int main()
{
	try
	{
		std::map<std::string, std::vector<long>> cont;
		std::vector<std::string> vtr;
		std::string lexem, lex;

		std::ifstream file("instruction.txt");

		while (std::getline(file, lexem))
		{
			vtr.clear();
			std::transform(lexem.begin(), lexem.end(), lexem.begin(), ::toupper);
			std::istringstream str(lexem);
			while (str >> lex)
			{
				if (lex.find(';') != lex.npos)
				{
					size_t x = lex.find(';');
					lex.erase(x, 1);
				}
				else if (lex.find(',') != lex.npos)
				{
					size_t x = lex.find(',');
					lex.erase(x, 1);
				}
				vtr.push_back(lex);
			}


			if (vtr[0] == "LOAD")
			{
				Create(cont, vtr[1]);
				Load(cont, vtr[1], vtr[2]);
			}
			else if (vtr[0] == "SAVE")
			{
				Save(cont, vtr[1], vtr[2]);
			}
			else if (vtr[0] == "RAND")
			{
				Rand(cont, vtr[1], stoi(vtr[2]), stoi(vtr[3]), stoi(vtr[4]));
			}
			else if (vtr[0] == "CONCAT")
			{
				Concat(cont, vtr[1], vtr[2]);
			}
			else if (vtr[0][0] == 'F' && vtr[0][1] == 'R' && vtr[0][2] == 'E' && vtr[0][3] == 'E')
			{
				std::string str(1, vtr[0][5]);
				Free(cont, str);
			}
			else if (vtr[0] == "REMOVE")
			{
				Remove(cont, vtr[1], stoi(vtr[2]), stoi(vtr[3]));
			}
			else if (vtr[0] == "COPY")
			{
				Copy(cont, vtr[1], stoi(vtr[2]), stoi(vtr[3]), vtr[4]);
			}
			else if (vtr[0] == "SORT")
			{
				Sort(cont, vtr[1], vtr[2]);
			}
			else if (vtr[0] == "PERMUTE")
			{
				Permute(cont, vtr[1]);
			}
			else if (vtr[0] == "INTERSECT")
			{
				Intersect(cont, vtr[1], vtr[2]);
			}
			else if (vtr[0] == "XOR")
			{
				Xor(cont, vtr[1], vtr[2]);
			}
			else if (vtr[0] == "STAT")
			{
				Stat(cont, vtr[1]);
			}
			else if (vtr[0] == "PRINT")
			{
				if ((vtr.begin() + 3) == vtr.end())
					Print(cont, vtr[1], vtr[2]);
				else
					Print(cont, vtr[1], stoi(vtr[2]), stoi(vtr[3]));
			}
		}
	}
	catch (std::exception)
	{
		std::cout << "Программа рухнула";
		return 1;
	}

	return 0;
}
